//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IncentiveCalcPOC.IncentiveCalcService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IncentiveCalcService.IIncentiveCalcData")]
    public interface IIncentiveCalcData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateCumulativePayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateCumulativePayoutResponse")]
        string CreateCumulativePayout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateCumulativePayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateCumulativePayoutResponse")]
        System.Threading.Tasks.Task<string> CreateCumulativePayoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateProductPayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateProductPayoutResponse")]
        string CreateProductPayout(string ProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateProductPayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateProductPayoutResponse")]
        System.Threading.Tasks.Task<string> CreateProductPayoutAsync(string ProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateEmpPayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateEmpPayoutResponse")]
        string CreateEmpPayout(string EmpNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/CreateEmpPayout", ReplyAction="http://tempuri.org/IIncentiveCalcData/CreateEmpPayoutResponse")]
        System.Threading.Tasks.Task<string> CreateEmpPayoutAsync(string EmpNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/UploadDataFile", ReplyAction="http://tempuri.org/IIncentiveCalcData/UploadDataFileResponse")]
        void UploadDataFile(string fileType, string fileName, bool processDataFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/UploadDataFile", ReplyAction="http://tempuri.org/IIncentiveCalcData/UploadDataFileResponse")]
        System.Threading.Tasks.Task UploadDataFileAsync(string fileType, string fileName, bool processDataFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/ProcessDataFile", ReplyAction="http://tempuri.org/IIncentiveCalcData/ProcessDataFileResponse")]
        void ProcessDataFile(string fileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIncentiveCalcData/ProcessDataFile", ReplyAction="http://tempuri.org/IIncentiveCalcData/ProcessDataFileResponse")]
        System.Threading.Tasks.Task ProcessDataFileAsync(string fileType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIncentiveCalcDataChannel : IncentiveCalcPOC.IncentiveCalcService.IIncentiveCalcData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IncentiveCalcDataClient : System.ServiceModel.ClientBase<IncentiveCalcPOC.IncentiveCalcService.IIncentiveCalcData>, IncentiveCalcPOC.IncentiveCalcService.IIncentiveCalcData {
        
        public IncentiveCalcDataClient() {
        }
        
        public IncentiveCalcDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IncentiveCalcDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IncentiveCalcDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IncentiveCalcDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateCumulativePayout() {
            return base.Channel.CreateCumulativePayout();
        }
        
        public System.Threading.Tasks.Task<string> CreateCumulativePayoutAsync() {
            return base.Channel.CreateCumulativePayoutAsync();
        }
        
        public string CreateProductPayout(string ProductCode) {
            return base.Channel.CreateProductPayout(ProductCode);
        }
        
        public System.Threading.Tasks.Task<string> CreateProductPayoutAsync(string ProductCode) {
            return base.Channel.CreateProductPayoutAsync(ProductCode);
        }
        
        public string CreateEmpPayout(string EmpNo) {
            return base.Channel.CreateEmpPayout(EmpNo);
        }
        
        public System.Threading.Tasks.Task<string> CreateEmpPayoutAsync(string EmpNo) {
            return base.Channel.CreateEmpPayoutAsync(EmpNo);
        }
        
        public void UploadDataFile(string fileType, string fileName, bool processDataFlag) {
            base.Channel.UploadDataFile(fileType, fileName, processDataFlag);
        }
        
        public System.Threading.Tasks.Task UploadDataFileAsync(string fileType, string fileName, bool processDataFlag) {
            return base.Channel.UploadDataFileAsync(fileType, fileName, processDataFlag);
        }
        
        public void ProcessDataFile(string fileType) {
            base.Channel.ProcessDataFile(fileType);
        }
        
        public System.Threading.Tasks.Task ProcessDataFileAsync(string fileType) {
            return base.Channel.ProcessDataFileAsync(fileType);
        }
    }
}
